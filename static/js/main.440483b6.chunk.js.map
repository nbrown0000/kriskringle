{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","input","result","handleChange","bind","handleSubmit","event","this","setState","target","value","console","clear","output","list1","split","list2","i","length","random","Math","floor","push","splice","preventDefault","className","onSubmit","onChange","cols","rows","type","map","item","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAiFeA,G,kBA5Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GACPC,OAAQ,IAGV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,E,0EAWNE,GACXC,KAAKC,SAAS,CAACP,MAAOK,EAAMG,OAAOC,U,mCAGxBJ,GAEX,GADAK,QAAQC,QACJL,KAAKP,MAAMC,MAAf,CAMA,IAJA,IAAIY,EAAS,GACTC,EAAQP,KAAKP,MAAMC,MAAMc,MAAM,MAC/BC,EAAQT,KAAKP,MAAMC,MAAMc,MAAM,MAE3BE,EAAE,EAAGA,EAAEH,EAAMI,OAAQD,IAAK,CAChC,IAAME,EAASC,KAAKC,MAAMD,KAAKD,SAAWH,EAAME,QAC7CJ,EAAMG,KAAOD,EAAMG,GACpBN,EAAOS,KAAP,UAAeR,EAAMG,GAArB,qBAAoCD,EAAMO,OAAOJ,EAAO,KAGrDH,EAAMG,EAAO,GACdN,EAAOS,KAAP,UAAeR,EAAMG,GAArB,qBAAoCD,EAAMO,OAAOJ,EAAO,EAAE,KAG1DN,EAAOS,KAAP,UAAeR,EAAMG,GAArB,qBAAoCD,EAAMO,OAAOJ,EAAO,EAAE,KAKhEZ,KAAKC,SAAS,CAACN,OAAQW,IACvBP,EAAMkB,oB,+BAMN,OACE,yBAAKC,UAAU,OAEb,wBAAIA,UAAU,UAAd,2BACA,wBAAIA,UAAU,UAAd,wDACF,yBAAKA,UAAU,WACb,0BAAMC,SAAUnB,KAAKF,aAAcoB,UAAU,UAC3C,+BACE,iDACA,8BAAUE,SAAUpB,KAAKJ,aAAcyB,KAAK,KAAKC,KAAK,QAExD,2BAAG,2BAAOC,KAAK,SAASpB,MAAM,oBAAoBiB,SAAUpB,KAAKJ,iBAGnE,yBAAKsB,UAAU,UACb,+BACE,uCACA,yBAAKA,UAAU,OACZlB,KAAKP,MAAME,OAAO6B,KAAI,SAACC,EAAKf,GAC3B,OAAO,4BAAKe,e,GAjEVC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.440483b6.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n// import { Stack } from './Stack';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      result: []\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChange(event) {\n    this.setState({input: event.target.value});\n  }\n\n  handleSubmit(event) {\n    console.clear();\n    if(!this.state.input) return\n\n    var output = [];\n    var list1 = this.state.input.split(\"\\n\");\n    var list2 = this.state.input.split(\"\\n\");\n\n    for(var i=0; i<list1.length; i++) {\n      const random = Math.floor(Math.random() * list2.length)\n      if(list1[i] !== list2[random]) {\n        output.push(`${list1[i]} buys for ${list2.splice(random,1)}`)\n      }\n      else {\n        if(list2[random+1]) {\n          output.push(`${list1[i]} buys for ${list2.splice(random+1,1)}`)\n        }\n        else {\n          output.push(`${list1[i]} buys for ${list2.splice(random-1,1)}`)\n        }\n      }\n    }\n       \n    this.setState({result: output})\n    event.preventDefault();\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n        <h1 className='column'>Kris Kringle Randomizer</h1>\n        <h2 className='column'>Assign each of your guests a different Kris Kringle.</h2>\n      <div className='content'>\n        <form onSubmit={this.handleSubmit} className=\"column\">\n          <label>\n            <p>Enter names below:</p>\n            <textarea onChange={this.handleChange} cols=\"25\" rows=\"20\" />\n          </label>\n          <p><input type=\"submit\" value=\"Generate Pairings\" onChange={this.handleChange} /></p>\n        </form>\n\n        <div className=\"column\">\n          <label>\n            <p>Results:</p>\n            <div className='box'>\n              {this.state.result.map((item,i) => {\n                return <li>{item}</li>\n              })}\n            </div>\n          </label>\n        </div>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}